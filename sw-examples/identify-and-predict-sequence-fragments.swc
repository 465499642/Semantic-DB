-- use smap to predict next digits from a sequence fragment:

-- min and max ngram lenghts for the if-then machines:
min |ngram len> => |3>
max |ngram len> => |8>

-- min and max fragment lengths for id-sequence operator:
min |fragment len> => |3>
max |fragment len> => |3>


-- learn a couple of sequences:
string |pi> => |3.141592653589>
digits |pi> => ssplit string |pi>

string |e> => |2.71828182845904523>
digits |e> => ssplit string |e>


-- define the if-then machine create-rule for the id-sequence code:
create-single-rule (*) #=>
    node |label> => |node: > _ node |number> _ |: > _ node |idx>
    digit-pattern node |label> => |__self>
    node |idx> => plus[1] node |idx>


-- define the if-then machine create-rule for the predict-next code:
create-next-rules (*) #=>
    node |label> => |node: > _ node |number> _ |: > _ node |idx>
    pattern node |label> => sselect[1,-2] |__self>
    next-1 node |label> => sselect[-1,-1] |__self>
    node |idx> => plus[1] node |idx>
    --
    node |label> => |node: > _ node |number> _ |: > _ node |idx>
    pattern node |label> => sselect[1,-3] |__self>
    next-2 node |label> => sselect[-2,-1] |__self>
    node |idx> => plus[1] node |idx>
    --
    node |label> => |node: > _ node |number> _ |: > _ node |idx>
    pattern node |label> => sselect[1,-4] |__self>
    next-3 node |label> => sselect[-3,-1] |__self>
    node |idx> => plus[1] node |idx>


-- a helper operator:
extract-node-numbers |*> #=> sselect[2,2] ssplit[": "] |_self>

-- define our if-then machine creation operator:
create-if-then-machine (*,*) #=>
    node |number> => |1>
    node |number> => plus[1] clean select[-1,-1] ket-sort extract-node-numbers rel-kets[then] |>
    node |idx> => |1>
    smap(|__self1>, min |ngram len>, max |ngram len>) |__self0>
    node |label> => |node: > _ node |number> _ |: *>
    then node |label> => |__self2>


-- now use it to create the next-k if-then machines:
|null> => create-if-then-machine(|op: create-next-rules>, |number: pi>) digits |pi>
|null> => create-if-then-machine(|op: create-next-rules>, |number: e>) digits |e>


-- now create the id sequence if-then machines:
min |ngram len> => |3>
max |ngram len> => |3>
|null> => create-if-then-machine(|op: create-single-rule>, |number: pi>) digits |pi>
|null> => create-if-then-machine(|op: create-single-rule>, |number: e>) digits |e>


-- define the id-sequence operator:
simm-pattern (*) #=> then drop-below[0.8] similar-input[digit-pattern] |_self>
id-sequence |*> #=> smap(|op: simm-pattern>, min |fragment len>, max |fragment len>) ssplit |_self>


-- define the predict-next operator:
predict-nodes |*> #=> drop-below[0.97] similar-input[pattern] ssplit |_self>
do-you-know-prediction |*> #=> do-you-know predict-nodes |_self>
-- predict-next |*> #=> print-next predict-nodes |_self>

predict-next |*> #=>
    the |result> => |#EMPTY#>
    the |result> => predict-nodes |__self>
    print-result the |result>

print-result |#EMPTY#> => |Anomaly, no sequence detected ... >
print-result |*> #=> print-next |_self>
    

-- define the print-next operators:
print-next-1 |yes> #=> print (|next-1:> __ then tmp |var> _ |: > _ smerge[" "] next-1 tmp |var>)
print-next-2 |yes> #=> print (|next-2:> __ then tmp |var> _ |: > _ smerge[" "] next-2 tmp |var>)
print-next-3 |yes> #=> print (|next-3:> __ then tmp |var> _ |: > _ smerge[" "] next-3 tmp |var>)

print-next |*> #=>
    tmp |var> => |__self>
    print-next-1 do-you-know next-1 |__self>
    print-next-2 do-you-know next-2 |__self>
    print-next-3 do-you-know next-3 |__self>
    |results>



-- usage examples:
-- id-sequence |3.1415>
-- id-sequnece |1828>
-- predict-next |3.141>
-- predict-next |2.7>


print-usage |*> #=>
    print
    print |Split the input sequence into fragments, and identify which sequence it belongs to:>
    print |  id-sequence ket(3.1415)> 
    print |  id-sequence ket(1828)>
    print
    print |Given a sequence, predict the next elements:>
    print |  predict-next ket(3.141)>
    print |  predict-next ket(2.7)>
    print |  predict-next ket(999)>
    print
    print |Given a sequence, test if it is recognized:>
    print |  do-you-know-prediction ket(3.141)>
    print |  do-you-know-prediction ket(999)>
    print

|null> => print-usage |>

